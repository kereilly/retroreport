#!/usr/bin/env python
## Batch downloads Retro Report Assets
## From a CVS file. Use the google script to
## Produce said CVS file
## Uses rrdownloader
## Version 0.1 05/31/2016

import os
import datetime
import csv
import sys
import subprocess

def rando():
    print "\nThis line is not as random as you think\n"

def about():
    print "Batch rrdownloader! Version 0.1"
    print "It batch downloads from a CSV file"
    rando()

# checks user input and stuff
def check_args(args):

    # Make sure we have required number of arguments
    if len(args) <= 1:
        instructions()
        exit()
    elif len(args) > 2:
        print "Too many user inputs. Ignoring everything after: " + args[1]

    if not os.path.isfile(args[1]):
        print "it appears that the file: " + args[1] + " isn't really a file at all"
        print "You kind of suck...Get it right\n\n"
        instructions()
        exit()

def instructions():
    print "\nThis program takes a CSV formatted file generated by a google sheet from our custom script"
    print 'Select a range in google sheets, then click on "RetroReport" > "Export for RRdownloader"'
    print "Then name the file. It saves in the root of your google drive"
    print "Note that if there is a ',' in the user text the batch downloader won't parse the data correctly"
    print 'Then call the program like so: "batchrrdownloader path_to_file"'


def main():

    about()
    check_args(sys.argv)    # check user input
    file = open(sys.argv[1])    # open the god damn file

    #open up a new text file to write to in same directory
    #ts = datetime.time() # get the seconds from the epoch
    #time_stamp = datetime.datetime.fromtimestamp(ts)#.strftime('%m-%d_%H-%M')   # format time so its readable
    time_stamp = "cheese"
    path_index = sys.argv[1].rfind('/') + 1 #find the last slash in file path, add one to get correct index number
    file_name = sys.argv[1][path_index:] + "rrBatch_Results_" + time_stamp + ".txt" #assign file name to our new variable
    results = open(file_name, 'w')  # actually create and open the new file

    # Process the CSV file
    jobs = []   # list to store jobs in
    csv_f = csv.reader(file)

    for row in csv_f:
        # Check and make sure the row has correct amount of elements
        if len(row) >= 6:
            temp_list = []
            temp_list.append(row[2])
            temp_list.append(row[5])
            # If row has in and out points use them
            if len(row) >= 8:
                temp_list.append(row[6])
                temp_list.append(row[7])
            # append asset to list of jobs
            jobs.append(temp_list)
        else:
            print "Error with: " + str(row)
            print "Not added to batch list"

    for job in jobs:
        asset_label = job[0]
        link = job[1]

        unpack = parse_asset_label(asset_label)
        rr_number = unpack[0]
        asset_number = unpack[1]

        print "Working on: " + asset_label
        cmd = "rrdownloader " + asset_label + " " + link    # build the command for rrdownloader
        proc = subprocess.Popen(cmd,
                            shell=True,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE,
                            )

        rrdownloader_says = proc.communicate()[0]
        print "/n"
        print rrdownloader_says




if __name__ == "__main__":
    main();